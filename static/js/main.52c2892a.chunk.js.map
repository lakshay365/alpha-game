{"version":3,"sources":["components/Option.js","components/OptionsContainer.js","components/ScoreBoard.js","lang/ka-hi.js","App.js","serviceWorker.js","index.js"],"names":["Option","this","props","selected","correct","id","bgColor","onClick","className","style","backgroundColor","cursor","String","fromCharCode","value","Component","OptionsContainer","state","time","clearInterval","timer","setState","score","onSelect","handleClick","setTimeout","updateTime","handlers","SELECT_A","SELECT_B","SELECT_C","SELECT_D","keyMap","progress","color","height","options","map","option","index","key","bind","getColor","seen","kahi","App","status","prompt","number","prompts","length","x","Math","floor","random","includes","push","loadQuiz","startTimer","handlePlay","TOGGLE","handlePause","styles","buildStyles","pathTransitionDuration","pathColor","trailColor","src","process","alt","handleSelect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.52c2892a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Option.css\";\n\nexport default class Option extends Component {\n  render() {\n    const { selected, correct, id } = this.props;\n\n    let bgColor = \"#282c34\";\n\n    if (selected === false) bgColor = \"#282c34\";\n    else if (selected === id) bgColor = correct === id ? \"green\" : \"red\";\n    else if (correct === id) bgColor = \"green\";\n\n    return (\n      <div\n        onClick={() => this.props.onClick(this.props.id)}\n        className=\"Option\"\n        style={{\n          backgroundColor: bgColor,\n          cursor: selected ? \"not-allowed\" : \"pointer\"\n        }}\n      >\n        <span className=\"Option-id\">\n          {String.fromCharCode(65 + this.props.id)}\n        </span>\n        <span className=\"Option-value\">{this.props.value}</span>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport LoadingBar from \"react-top-loading-bar\";\nimport Option from \"./Option\";\nimport \"./OptionsContainer.css\";\nimport { GlobalHotKeys } from \"react-hotkeys\";\n\nexport default class OptionsContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { selected: false, time: 10 };\n  }\n\n  handleClick(id) {\n    if (this.state.selected !== false) return;\n\n    clearInterval(this.timer);\n\n    this.setState({ selected: id });\n\n    let score = this.state.time;\n    if (id !== this.props.correct) score -= 10;\n\n    this.props.onSelect(score);\n  }\n\n  updateTime(time) {\n    if (time < 0) {\n      this.handleClick(-1);\n      return;\n    }\n\n    this.setState({ time: time });\n\n    this.timer = setTimeout(() => this.updateTime(time - 1), 1000);\n  }\n\n  componentDidMount() {\n    this.updateTime(10);\n  }\n\n  render() {\n    const keyMap = {\n      SELECT_A: \"a\",\n      SELECT_B: \"b\",\n      SELECT_C: \"c\",\n      SELECT_D: \"d\"\n    };\n\n    const handlers = {\n      SELECT_A: () => this.handleClick(0),\n      SELECT_B: () => this.handleClick(1),\n      SELECT_C: () => this.handleClick(2),\n      SELECT_D: () => this.handleClick(3)\n    };\n\n    return (\n      <GlobalHotKeys keyMap={keyMap} handlers={handlers}>\n        <div className=\"OptionsContainer\">\n          <LoadingBar\n            progress={this.state.time * 10}\n            color=\"#18b0b0\"\n            height={5}\n          />\n          {this.props.options.map((option, index) => (\n            <Option\n              id={index}\n              key={index}\n              value={option}\n              selected={this.state.selected}\n              correct={this.props.correct}\n              onClick={this.handleClick.bind(this)}\n            />\n          ))}\n        </div>\n      </GlobalHotKeys>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./ScoreBoard.css\";\n\nfunction getColor(score) {\n  if (score > 0) return \"#04fb18\";\n  else if (score < 0) return \"red\";\n\n  return \"yellow\";\n}\n\nexport default ({ seen, score }) => (\n  <div className=\"ScoreBoard\">\n    <span className=\"ScoreBoard-item\">Seen: {seen}</span>\n    <span className=\"ScoreBoard-item\">\n      Score: <span style={{ color: getColor(score) }}>{score}</span>\n    </span>\n  </div>\n);\n","export let kahi = [\n  [\"ಅ\", \"अ\"],\n  [\"ಆ\", \"आ\"],\n  [\"ಇ\", \"इ\"],\n  [\"ಈ\", \"ई\"],\n  [\"ಉ\", \"उ\"],\n  [\"ಊ\", \"ऊ\"],\n  [\"ಋ\", \"ऋ\"],\n  [\"ಎ\", \"ए\"],\n  [\"ಏ\", \"ऐ\"],\n  [\"ಐ\", \"आइ\"],\n  [\"ಒ\", \"ओ\"],\n  [\"ಓ\", \"औ\"],\n  [\"ಔ\", \"ओउ\"],\n  [\"ಅಂ\", \"अं\"],\n  [\"ಅಃ\", \"अः\"],\n  [\"ಕ\", \"क\"],\n  [\"ಖ\", \"ख\"],\n  [\"ಗ\", \"ग\"],\n  [\"ಘ\", \"घ\"],\n  [\"ಙ\", \"ङ\"],\n  [\"ಚ\", \"च\"],\n  [\"ಛ\", \"छ\"],\n  [\"ಜ\", \"ज\"],\n  [\"ಝ\", \"झ\"],\n  [\"ಞ\", \"ञ\"],\n  [\"ಟ\", \"ट\"],\n  [\"ಠ\", \"ठ\"],\n  [\"ಡ\", \"ड\"],\n  [\"ಢ\", \"ढ\"],\n  [\"ಣ\", \"ण\"],\n  [\"ತ\", \"त\"],\n  [\"ಥ\", \"थ\"],\n  [\"ದ\", \"द\"],\n  [\"ಧ\", \"ध\"],\n  [\"ನ\", \"न\"],\n  [\"ಪ\", \"प\"],\n  [\"ಫ\", \"फ\"],\n  [\"ಬ\", \"ब\"],\n  [\"ಭ\", \"भ\"],\n  [\"ಮ\", \"म\"],\n  [\"ಯ\", \"य\"],\n  [\"ರ\", \"र\"],\n  [\"ಲ\", \"ल\"],\n  [\"ವ\", \"व\"],\n  [\"ಶ\", \"श\"],\n  [\"ಷ\", \"ष\"],\n  [\"ಸ\", \"स\"],\n  [\"ಹ\", \"ह\"],\n  [\"ಳ\", \"ळ\"]\n];\n","import React, { Component } from \"react\";\nimport {\n  CircularProgressbarWithChildren,\n  buildStyles\n} from \"react-circular-progressbar\";\nimport { GlobalHotKeys } from \"react-hotkeys\";\nimport OptionsContainer from \"./components/OptionsContainer\";\nimport ScoreBoard from \"./components/ScoreBoard\";\nimport { kahi } from \"./lang/ka-hi\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport \"./App.css\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      status: \"PAUSED\",\n      prompt: null,\n      options: [],\n      correct: -1,\n      selected: false,\n      number: 0,\n      seen: 0,\n      score: 0\n    };\n  }\n\n  loadQuiz() {\n    let prompts = [];\n    let options = [];\n\n    while (prompts.length < 4) {\n      const x = kahi[Math.floor(Math.random() * kahi.length)];\n\n      if (prompts.includes(x[0])) continue;\n\n      prompts.push(x[0]);\n      options.push(x[1]);\n    }\n\n    let correct = Math.floor(Math.random() * 4);\n\n    // avoid repeating same prompts\n    if (prompts[correct] === this.state.prompt) correct = (correct + 1) % 4;\n\n    this.setState({\n      prompt: prompts[correct],\n      options,\n      correct,\n      selected: false\n    });\n  }\n\n  handlePlay() {\n    this.loadQuiz();\n    this.setState({ status: \"READY\", number: 0.0 });\n    setTimeout(() => this.setState({ number: 100 }), 100);\n    this.startTimer = setTimeout(() => this.setState({ status: \"PLAY\" }), 2100);\n  }\n\n  handlePause() {\n    this.setState({ status: \"PAUSED\", number: 0.0 });\n    clearInterval(this.startTimer);\n  }\n\n  handleSelect(score) {\n    setTimeout(() => this.handlePlay(), 2000);\n\n    this.setState({\n      score: this.state.score + score,\n      seen: this.state.seen + 1\n    });\n  }\n\n  render() {\n    let prompt;\n\n    if (this.state.status === \"PAUSED\" || this.state.status === \"READY\")\n      prompt = (\n        <GlobalHotKeys\n          keyMap={{ TOGGLE: \"space\" }}\n          handlers={{\n            TOGGLE: () => {\n              this.state.status === \"PAUSED\"\n                ? this.handlePlay()\n                : this.handlePause();\n            }\n          }}\n        >\n          <CircularProgressbarWithChildren\n            className=\"App-loading-icon\"\n            value={this.state.number}\n            styles={buildStyles({\n              pathTransitionDuration: 2,\n              pathColor: \"#18b0b0\",\n              trailColor: \"#0000\"\n            })}\n          >\n            {this.state.status === \"PAUSED\" ? (\n              <img\n                className=\"App-play-button\"\n                src={process.env.PUBLIC_URL + \"/play.svg\"}\n                alt=\"play button\"\n                onClick={() => this.handlePlay()}\n              />\n            ) : (\n              <img\n                className=\"App-pause-button\"\n                src={process.env.PUBLIC_URL + \"/pause.svg\"}\n                alt=\"pause button\"\n                onClick={() => this.handlePause()}\n              />\n            )}\n          </CircularProgressbarWithChildren>\n        </GlobalHotKeys>\n      );\n    else if (this.state.status === \"PLAY\")\n      prompt = <p className=\"App-alpha\">{this.state.prompt}</p>;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <ScoreBoard seen={this.state.seen} score={this.state.score} />\n          <div className=\"App-alpha-container\">{prompt}</div>\n          {this.state.status === \"PLAY\" && (\n            <OptionsContainer\n              options={this.state.options}\n              correct={this.state.correct}\n              selected={false}\n              onSelect={this.handleSelect.bind(this)}\n            />\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}